type Cause {
	id: String!
	causeName: String!
	organizationId: String!
	organizationName: String!
	details: String!
	image: String
	country: String!
}

type Causes {
	causes: [Cause!]
}

type Event {
	id: String!
	eventName: String!,
	cause: String!,
	organizationId: String!,
	causeDetails: AWSJSON,
	hostName: String!,
	hostEmail: String!,
	location: String!,
	date: String!,
	time: String!,
	minDonation: Int!,
	recommendedDonation: Int,
	maxCapacity: Int,
	viewId: String!,
	rsvpId: String!,
	editId: String!
}

type Mutation {
	addEvent(
	eventName: String!, cause: String!, organizationId: String!, hostName: String!, hostEmail: String!, location: String!, minDonation: Int!, recommendedDonation: Int, maxCapacity: Int, date: String!, time: String!, viewId: String!, editId: String!, rsvpId: String!): Event!
	addCharge(token: String!): StripeCharge!
}

type Organization {
	name: String!
}

type Query {
	getOrganizationInfo(name: String!): Organization!
	getCauseInfo(id: String!, organizationId: String!): Cause
	getAllCauses: Causes!
	getEventForView(viewId: String!): Event!
	getEventForEdit(editId: String!): Event!
}

type StripeCharge {
	body: String!
}

schema {
	query: Query
	mutation: Mutation
}