# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dynamodb # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline
  - serverless-dynamodb-fixtures

custom:
  accountId: 395974092468
  stage: ${opt:stage, self:provider.stage}
  tableThroughputs:
    prod: 5
    default: 3
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
  fixtures:
    - table: ${self:provider.environment.ORGANIZATION_TABLE}
      enable: true
      sources:
        - ./dev-organizations.yml
    - table: ${self:provider.environment.CAUSE_TABLE}
      enable: true
      autogeneratedId: id
      sources:
        - ./dev-causes.yml  

  appSync:
    name: dynamodbDemo # defaults to api
    authenticationType: API_KEY # AMAZON_COGNITO_USER_POOLS is also supported
    # userPoolConfig: @todo look into adding userPool config for authenticated users?
    #   awsRegion: us-east-1 # required # region
    #   defaultAction: ALLOW
    #   userPoolId: {Ref: CognitoUserPoolUsers}
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    serviceRole: "AppSyncServiceRole"
    mappingTemplates:
      - dataSource: Organizations
        type: Query
        field: getOrganizationInfo
        request: "getOrganizationInfo-request-mapping-template.txt"
        response: "getOrganizationInfo-response-mapping-template.txt"
      - dataSource: Causes
        type: Query
        field: getCauseInfo
        request: "getCauseInfo-request-mapping-template.txt"
        response: "getCauseInfo-response-mapping-template.txt"
      - dataSource: Causes
        type: Query
        field: getAllCauses
        request: "getCauses-request-mapping-template.txt"
        response: "getCauses-response-mapping-template.txt"
      - dataSource: Organizations
        type: Cause
        field: organizationName
        request: "organizationName-request-mapping-template.txt"
        response: "organizationName-response-mapping-template.txt" 
      - dataSource: Events
        type: Mutation
        field: addEvent
        request: "addEvent-request-mapping-template.txt"
        response: "addEvent-response-mapping-template.txt"
      - dataSource: Events
        type: Mutation
        field: addGuest
        request: "addGuest-request-mapping-template.txt"
        response: "addGuest-response-mapping-template.txt"
      - dataSource: Events
        type: Mutation
        field: removeGuest
        request: "removeGuest-request-mapping-template.txt"
        response: "getItemResponse.txt"   
      - dataSource: Events
        type: Query
        field: getEventForView
        request: "getEventForView-request-mapping-template.txt"
        response: "getEventForView-response-mapping-template.txt"   
      - dataSource: Events
        type: Query
        field: getEventForEdit
        request: "getEventForEdit-request-mapping-template.txt"
        response: "getEventForEdit-response-mapping-template.txt"       
      - dataSource: Stripe_Lambda
        type: Mutation
        field: addCharge
        request: "addCharge-request-mapping-template.txt"
        response: "getItemResponse.txt"
      - dataSource: Email_Send_Invitation_Lambda
        type: Mutation
        field: sendInvitation
        request: "sendInvitation-request-mapping-template.txt"
        response: "getItemResponse.txt"  
      - dataSource: Causes
        type: Event
        field: causeDetails
        request: "eventCauseDetails-request-mapping-template.txt"
        response: "eventCauseDetails-response-mapping-template.txt"     
  
            
      # - dataSource: Tweets
      #   type: Mutation
      #   field: deleteTweet
      #   request: "deleteTweet-request-mapping-template.txt"
      #   response: "deleteTweet-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: reTweet
      #   request: "reTweet-request-mapping-template.txt"
      #   response: "reTweet-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: updateTweet
      #   request: "updateTweet-request-mapping-template.txt"
      #   response: "updateTweet-response-mapping-template.txt"
      # - dataSource: Users
      #   type: Mutation
      #   field: updateUserInfo
      #   request: "updateUserInfo-request-mapping-template.txt"  

    schema: # defaults schema.graphql
    #serviceRole: # if not provided, a default role is generated
    dataSources:
      - type: AWS_LAMBDA
        name: Stripe_Lambda
        description: 'Stripe Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:stripe-${self:custom.stage}-createCharge"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}"
      - type: AWS_LAMBDA
        name: Email_Send_Invitation_Lambda
        description: 'Send Invitation Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:us-east-1:${self:custom.accountId}:function:email-${self:custom.stage}-sendInvitation"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/Lambda-${self:custom.appSync.serviceRole}"  
      - type: AMAZON_DYNAMODB
        name: Organizations
        description: 'Organiations table'
        config:
          tableName: "${self:custom.stage}-organization"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
                - "dynamodb:GetItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-organization"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-organization/*"
      - type: AMAZON_DYNAMODB
        name: Causes
        description: 'Causes table'
        config:
          tableName: "${self:custom.stage}-cause"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
                - "dynamodb:GetItem"
                - "dynamodb:Scan"
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-cause"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-cause/*"
      - type: AMAZON_DYNAMODB
        name: Events
        description: 'Events table'
        config:
          tableName: "${self:custom.stage}-event"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-event"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-event/*"
      # seed: - @todo determine if we need this
      #   test:
      #     sources:
      #       - table: ${self:provider.environment.ORGANIZATION_TABLE}
      #         sources: [seed-data/Organizations.json] 
      #       - table: ${self:provider.environment.CAUSE_TABLE}
      #         sources: [seed-data/Causes.json]


# custom:
#   # Our stage is based on what is passed in when running serverless
#   # commands. Or fallsback to what we have set in the provider section.
#   stage: ${opt:stage, self:provider.stage}
#   # Set the table name here so we can use it while testing locally
#   # tableName: ${self:custom.stage}-mono-notes
#   # Set our DynamoDB throughput for prod and all other non-prod stages.
#   tableThroughputs:
#     prod: 5
#     default: 1
#   tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
#   fixtures:
#     - table: ${self:provider.environment.ORGANIZATION_TABLE}
#       enable: true
#       sources:
#         - ./dev-organizations.yml
#     - table: ${self:provider.environment.CAUSE_TABLE}
#       enable: true
#       autogeneratedId: id
#       sources:
#         - ./dev-causes.yml    

provider:
  name: aws
  runtime: nodejs10.x
  profile: personal
  region: us-east-1
  stage: dev 
  environment:
    ORGANIZATION_TABLE: "${self:custom.stage}-organization"
    CAUSE_TABLE: "${self:custom.stage}-cause"
    EVENT_TABLE: "${self:custom.stage}-event"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"





resources:
  Resources:
    CognitoUserPoolUsers:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: DineUserPool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        UsernameAttributes:
          - email
    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
          ClientName: "Web"
          GenerateSecret: false
          RefreshTokenValidity: 30
          UserPoolId: {Ref: CognitoUserPoolUsers}
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "Lambda-AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:us-east-1:*:function:stripe-${self:custom.stage}-createCharge"
                    - "arn:aws:lambda:us-east-1:*:function:stripe-${self:custom.stage}-createCharge:*"
                    - "arn:aws:lambda:us-east-1:*:function:email-${self:custom.stage}-sendInvitation"
                    - "arn:aws:lambda:us-east-1:*:function:email-${self:custom.stage}-sendInvitation:*"
  
    OrganizationTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        TableName: ${self:provider.environment.ORGANIZATION_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    CauseTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          -
            AttributeName: "organizationId"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
          -
            AttributeName: "organizationId"
            KeyType: "RANGE"  
        TableName: ${self:provider.environment.CAUSE_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    EventTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          -
            AttributeName: "viewId"
            AttributeType: "S"
          -
            AttributeName: "editId"
            AttributeType: "S"      
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        TableName: ${self:provider.environment.EVENT_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}  
        GlobalSecondaryIndexes:
        - IndexName: viewIds-index
          KeySchema:
          - AttributeName: viewId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '3'
            WriteCapacityUnits: '3'
        - IndexName: editIdss-index
          KeySchema:
          - AttributeName: editId
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '3'
            WriteCapacityUnits: '3'



