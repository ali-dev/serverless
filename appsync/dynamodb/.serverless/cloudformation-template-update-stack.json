{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "CognitoUserPoolUsers": {
      "Type": "AWS::Cognito::UserPool",
      "DeletionPolicy": "Retain",
      "Properties": {
        "UserPoolName": "DineUserPool",
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 8,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": false,
            "RequireUppercase": true
          }
        },
        "UsernameAttributes": [
          "email"
        ]
      }
    },
    "WebUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "Web",
        "GenerateSecret": false,
        "RefreshTokenValidity": 30,
        "UserPoolId": {
          "Ref": "CognitoUserPoolUsers"
        }
      }
    },
    "AppSyncServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "Lambda-AppSyncServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Lambda-AppSyncServiceRole-Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:invokeFunction"
                  ],
                  "Resource": [
                    "arn:aws:lambda:us-east-1:*:function:stripe-dev-createCharge",
                    "arn:aws:lambda:us-east-1:*:function:stripe-dev-createCharge:*",
                    "arn:aws:lambda:us-east-1:*:function:email-dev-sendInvitation",
                    "arn:aws:lambda:us-east-1:*:function:email-dev-sendInvitation:*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "OrganizationTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "dev-organization",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 3,
          "WriteCapacityUnits": 3
        }
      }
    },
    "CauseTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "organizationId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "organizationId",
            "KeyType": "RANGE"
          }
        ],
        "TableName": "dev-cause",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 3,
          "WriteCapacityUnits": 3
        }
      }
    },
    "EventTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          },
          {
            "AttributeName": "viewId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "editId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "TableName": "dev-event",
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 3,
          "WriteCapacityUnits": 3
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "viewIds-index",
            "KeySchema": [
              {
                "AttributeName": "viewId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "3",
              "WriteCapacityUnits": "3"
            }
          },
          {
            "IndexName": "editIdss-index",
            "KeySchema": [
              {
                "AttributeName": "editId",
                "KeyType": "HASH"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "3",
              "WriteCapacityUnits": "3"
            }
          }
        ]
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "dynamodbDemo",
        "AuthenticationType": "API_KEY",
        "AdditionalAuthenticationProviders": []
      }
    },
    "GraphQlApiKeyDefault": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Description": "serverless-appsync-plugin: AppSync API Key for GraphQlApiKeyDefault",
        "Expires": 1615264417
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "type Cause {\n\tid: String!\n\tcauseName: String!\n\torganizationId: String!\n\torganizationName: String!\n\tdetails: String!\n\timage: String\n\tcountry: String!\n}\n\ntype Causes {\n\tcauses: [Cause!]\n}\n\ntype Event {\n\tid: String!\n\teventName: String!,\n\tcause: String!,\n\torganizationId: String!,\n\tcauseDetails: AWSJSON,\n\thostName: String!,\n\thostEmail: String!,\n\tlocation: String!,\n\tdate: String!,\n\ttime: String!,\n\tendTime: String,\n\teventDetails: String!,\n\trecommendedDonation: Int,\n\tviewId: String!,\n\trsvpId: String!,\n\teditId: String!,\n\tguests: AWSJSON\n}\n\ntype Mutation {\n\taddEvent(\n\t\teventName: String!, \n\t\tcause: String!, \n\t\torganizationId: String!, \n\t\thostName: String!, \n\t\thostEmail: String!, \n\t\tlocation: String!, \n\t\trecommendedDonation: Int, \n\t\tdate: String!, \n\t\ttime: String!,\n\t\tendTime: String,\n\t\teventDetails: String!,\n\t\tviewId: String!, \n\t\teditId: String!, \n\t\trsvpId: String!, \n\t\tguests: AWSJSON\n\t): Event!\n\taddGuest(guestId: String!, eventId: String!, guestDetails: AWSJSON!): AWSJSON\n\tremoveGuest(guestId: String!, eventId: String!): AWSJSON\n\taddCharge(token: String!, eventId: String!, guestId: String!, causeId: String!, amount: Int, rsvp: String!): StripeCharge!\n\tsendInvitation(data: String!): AWSJSON!\n}\n\ntype Organization {\n\tname: String!\n}\n\ntype Query {\n\tgetOrganizationInfo(name: String!): Organization!\n\tgetCauseInfo(id: String!, organizationId: String!): Cause\n\tgetAllCauses: Causes!\n\tgetEventForView(viewId: String!): Event!\n\tgetEventForEdit(editId: String!): Event!\n}\n\ntype StripeCharge {\n\tbody: String!\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsOrganizationsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsOrganizationsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/dev-organization",
                    "arn:aws:dynamodb:us-east-1:*:table/dev-organization/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsCausesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsCausesPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/dev-cause",
                    "arn:aws:dynamodb:us-east-1:*:table/dev-cause/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsEventsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/dev-event",
                    "arn:aws:dynamodb:us-east-1:*:table/dev-event/*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsStripeLambda": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "Stripe_Lambda",
        "Description": "Stripe Lambda DataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": "arn:aws:iam::395974092468:role/Lambda-AppSyncServiceRole",
        "LambdaConfig": {
          "LambdaFunctionArn": "arn:aws:lambda:us-east-1:395974092468:function:stripe-dev-createCharge"
        }
      }
    },
    "GraphQlDsEmailSendInvitationLambda": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "Email_Send_Invitation_Lambda",
        "Description": "Send Invitation Lambda DataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": "arn:aws:iam::395974092468:role/Lambda-AppSyncServiceRole",
        "LambdaConfig": {
          "LambdaFunctionArn": "arn:aws:lambda:us-east-1:395974092468:function:email-dev-sendInvition"
        }
      }
    },
    "GraphQlDsOrganizations": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "Organizations",
        "Description": "Organiations table",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsOrganizationsRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "dev-organization",
          "UseCallerCredentials": false
        }
      }
    },
    "GraphQlDsCauses": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "Causes",
        "Description": "Causes table",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsCausesRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "dev-cause",
          "UseCallerCredentials": false
        }
      }
    },
    "GraphQlDsEvents": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "Events",
        "Description": "Events table",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsEventsRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "dev-event",
          "UseCallerCredentials": false
        }
      }
    },
    "GraphQlResolverQuerygetOrganizationInfo": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getOrganizationInfo",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsOrganizations",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetCauseInfo": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getCauseInfo",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n        \"organizationId\": $util.dynamodb.toDynamoDBJson($ctx.args.organizationId)\n        \n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsCauses",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetAllCauses": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getAllCauses",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Scan\",\n    ## Add 'limit' and 'nextToken' arguments to this field in your schema to implement pagination. **\n    ## \"limit\": $util.defaultIfNull(${ctx.args.limit}, 20),\n    ## \"nextToken\": $util.toJson($util.defaultIfNullOrBlank($ctx.args.nextToken, null))\n}",
        "ResponseMappingTemplate": "{\n\"causes\": $utils.toJson($context.result.items)\n}",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsCauses",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverCauseorganizationName": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Cause",
        "FieldName": "organizationName",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.source.organizationId),\n    }\n}",
        "ResponseMappingTemplate": "## Pass back the result from DynamoDB. **\n$util.toJson($ctx.result.name)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsOrganizations",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddEvent": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addEvent",
        "RequestMappingTemplate": "## Below example shows how to create an object from all provided GraphQL arguments\n## The primary key of the obejct is a randomly generated UUD using the $util.autoId() utility\n## Other utilities include $util.matches() for regular expressions, $util.time.nowISO8601() or\n##   $util.time.nowEpochMilliSeconds() for timestamps, and even List or Map helpers like\n##   $util.list.copyAndRetainAll() $util.map.copyAndRemoveAllKeys() for shallow copies\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-context-reference.html#utility-helpers-in-util\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"PutItem\",\n    \"key\" : {\n        ## If object \"id\" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)\n        \"id\": $util.dynamodb.toDynamoDBJson($util.autoId()),\n    },\n    \"attributeValues\" : $util.dynamodb.toMapValuesJson($ctx.args)\n}",
        "ResponseMappingTemplate": "$utils.toJson($context.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEvents",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddGuest": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addGuest",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        ## If object \"id\" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.eventId),\n    },\n    \"update\" : {\n        \"expression\" : \"SET guests.#guest_id = :guestDetails ADD version :one\",\n        \"expressionNames\": {\n            \"#guest_id\" : \"${ctx.args.guestId}\"\n        },\n        \"expressionValues\": {\n            \":guestDetails\" : $util.dynamodb.toDynamoDBJson($ctx.arguments.guestDetails),\n            \":one\" : { \"N\": 1 }\n        }\n    }\n}",
        "ResponseMappingTemplate": "## Pass back the result from DynamoDB. **\n$util.toJson($ctx.result.guests[\"${ctx.args.guestId}\"])",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEvents",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationremoveGuest": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "removeGuest",
        "RequestMappingTemplate": "{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"UpdateItem\",\n    \"key\" : {\n        ## If object \"id\" should come from GraphQL arguments, change to $util.dynamodb.toDynamoDBJson($ctx.args.id)\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.eventId),\n    },\n    \"update\" : {\n        \"expression\" : \"REMOVE guests.#guest_id ADD version :one\",\n        \"expressionNames\": {\n            \"#guest_id\" : \"${ctx.args.guestId}\"\n        },\n        \"expressionValues\": {\n            \":one\" : { \"N\": 1 }\n        }\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEvents",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetEventForView": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getEventForView",
        "RequestMappingTemplate": "## Below example shows an equality query to find an item by GraphQL input argument of \"id\"\n## Queries can be run against a table or an index, which can be more performant than a Scan operation\n##   If using an index you will also provide an \"index\" : \"indexname\" where indexname is the name of your index\n## \"expression\" is the logical EQUALITY condition that will be evaluated\n## \"espressionValues\" is the attribute in DynamoDB that you're evaluating the \"expression\" condition against\n## You can optionally provide \"filter\" that will filter the results returned from a query\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html#aws-appsync-resolver-mapping-template-reference-dynamodb-query\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\" : \"viewIds-index\",\n    \"query\" : {\n        ## Provide a query expression. **\n        \"expression\": \"viewId = :viewId\",\n        \"expressionValues\" : {\n            \":viewId\" : $util.dynamodb.toDynamoDBJson($ctx.args.viewId)\n        }\n    }\n}",
        "ResponseMappingTemplate": "#if ($ctx.result.items.size() > 0)\n  $util.toJson($ctx.result.items[0])\n#else\n  null\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEvents",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetEventForEdit": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getEventForEdit",
        "RequestMappingTemplate": "## Below example shows an equality query to find an item by GraphQL input argument of \"id\"\n## Queries can be run against a table or an index, which can be more performant than a Scan operation\n##   If using an index you will also provide an \"index\" : \"indexname\" where indexname is the name of your index\n## \"expression\" is the logical EQUALITY condition that will be evaluated\n## \"espressionValues\" is the attribute in DynamoDB that you're evaluating the \"expression\" condition against\n## You can optionally provide \"filter\" that will filter the results returned from a query\n## Read more: https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-dynamodb.html#aws-appsync-resolver-mapping-template-reference-dynamodb-query\n\n{\n    \"version\" : \"2017-02-28\",\n    \"operation\" : \"Query\",\n    \"index\" : \"editIdss-index\",\n    \"query\" : {\n        ## Provide a query expression. **\n        \"expression\": \"editId = :editId\",\n        \"expressionValues\" : {\n            \":editId\" : $util.dynamodb.toDynamoDBJson($ctx.args.editId)\n        }\n    }\n}",
        "ResponseMappingTemplate": "#if ($ctx.result.items.size() > 0)\n  $util.toJson($ctx.result.items[0])\n#else\n  null\n#end",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEvents",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationaddCharge": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "addCharge",
        "RequestMappingTemplate": "#**\nThe value of 'payload' after the template has been evaluated\nwill be passed as the event to AWS Lambda.\n*#\n{\n  \"version\" : \"2017-02-28\",\n  \"operation\": \"Invoke\",\n  ## \"payload\": $util.toJson($context.args)\n  \"payload\": {\n        \"field\": \"createCharge\",\n        \"arguments\":  $utils.toJson($context.arguments),\n        ## \"handle\" : $utils.toJson($context.identity.username)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsStripeLambda",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationsendInvitation": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "sendInvitation",
        "RequestMappingTemplate": "#**\nThe value of 'payload' after the template has been evaluated\nwill be passed as the event to AWS Lambda.\n*#\n{\n  \"version\" : \"2017-02-28\",\n  \"operation\": \"Invoke\",\n  ## \"payload\": $util.toJson($context.args)\n  \"payload\": {\n        \"field\": \"sendInvitation\",\n        \"arguments\":  $utils.toJson($context.arguments),\n        ## \"handle\" : $utils.toJson($context.identity.username)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsEmailSendInvitationLambda",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverEventcauseDetails": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Event",
        "FieldName": "causeDetails",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.source.cause),\n        \"organizationId\": $util.dynamodb.toDynamoDBJson($ctx.source.organizationId)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsCauses",
            "Name"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      }
    },
    "GraphQlApiKeyDefault": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApiKeyDefault",
          "ApiKey"
        ]
      }
    }
  }
}