# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dynamodb # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-dynamodb-fixtures
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-appsync-offline
  - serverless-offline

custom:
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        endpoint: "http://localhost:8000"
        region: localhost
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    # seed: - @todo determine if we need this
    #   test:
    #     sources:
    #       - table: ${self:provider.environment.ORGANIZATION_TABLE}
    #         sources: [seed-data/Organizations.json] 
    #       - table: ${self:provider.environment.CAUSE_TABLE}
    #         sources: [seed-data/Causes.json]


custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  # tableName: ${self:custom.stage}-mono-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  fixtures:
    - table: ${self:provider.environment.ORGANIZATION_TABLE}
      enable: true
      sources:
        - ./dev-organizations.yml
    - table: ${self:provider.environment.CAUSE_TABLE}
      enable: true
      autogeneratedId: id
      sources:
        - ./dev-causes.yml    

provider:
  name: aws
  runtime: nodejs10.x
  profile: personal
  region: us-east-1
  stage: dev 
  environment:
    ORGANIZATION_TABLE: "${self:custom.stage}-organization"
    CAUSE_TABLE: "${self:custom.stage}-cause"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"


resources:
  Resources:
    OrganizationTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        TableName: ${self:provider.environment.ORGANIZATION_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    CauseTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          -
            AttributeName: "organizationId"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
          -
            AttributeName: "organizationId"
            KeyType: "RANGE"  
        TableName: ${self:provider.environment.CAUSE_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    




