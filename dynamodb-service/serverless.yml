# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: dynamodb # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-dynamodb-fixtures

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  # tableName: ${self:custom.stage}-mono-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  fixtures:
    - table: ${self:provider.environment.ORGANIZATION_TABLE}
      enable: true
      sources:
        - ./dev-organizations.yml
    - table: ${self:provider.environment.CAUSE_TABLE}
      enable: true
      autogeneratedId: id
      sources:
        - ./dev-causes.yml    

provider:
  name: aws
  runtime: nodejs10.x
  profile: personal
  region: us-east-1
  stage: dev 
  environment:
    ORGANIZATION_TABLE: "${self:custom.stage}-organization"
    CAUSE_TABLE: "${self:custom.stage}-cause"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"



 appSync:
    name: dynamodbDemo # defaults to api
    authenticationType: AMAZON_COGNITO_USER_POOLS # API_KEY is also supported
    userPoolConfig:
      awsRegion: us-east-1 # required # region
      defaultAction: ALLOW
      userPoolId: {Ref: CognitoUserPoolUsers}
    # region: # defaults to provider region
    # mappingTemplatesLocation: # defaults to mapping-templates
    mappingTemplates:
      - dataSource: Organizations
        type: Organization
        field: getOrganizationInfo
        request: "getOrganizationInfo-request-mapping-template.txt"
        response: "getOrganizationInfo-response-mapping-template.txt"
      # - dataSource: Organizations
      #   type: Organization
      #   field: meInfo
      #   request: "meInfo-request-mapping-template.txt"
      #   response: "meInfo-response-mapping-template.txt"
      # - dataSource: Organizations
      #   type: Organization
      #   field: topTweet
      #   request: "topTweet-request-mapping-template.txt"
      #   response: "topTweet-response-mapping-template.txt"
      # - dataSource: Organizations
      #   type: Organization
      #   field: tweets
      #   request: "tweets-request-mapping-template.txt"
      #   response: "tweets-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: createTweet
      #   request: "createTweet-request-mapping-template.txt"
      #   response: "createTweet-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: deleteTweet
      #   request: "deleteTweet-request-mapping-template.txt"
      #   response: "deleteTweet-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: reTweet
      #   request: "reTweet-request-mapping-template.txt"
      #   response: "reTweet-response-mapping-template.txt"
      # - dataSource: Tweets
      #   type: Mutation
      #   field: updateTweet
      #   request: "updateTweet-request-mapping-template.txt"
      #   response: "updateTweet-response-mapping-template.txt"
      # - dataSource: Users
      #   type: Mutation
      #   field: updateUserInfo
      #   request: "updateUserInfo-request-mapping-template.txt"
      #   response: "updateUserInfo-response-mapping-template.txt"
    # schema: # defaults schema.graphql
    #serviceRole: # if not provided, a default role is generated
    dataSources:
      - type: AMAZON_DYNAMODB
        name: Organizations
        description: 'Organiations table'
        config:
          tableName: "${self:custom.stage}-organization"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-organization"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-organization/*"
      - type: AMAZON_DYNAMODB
        name: Causes
        description: 'Causes table'
        config:
          tableName: "${self:custom.stage}-cause"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:UpdateItem"
                - "dynamodb:PutItem"
                - "dynamodb:DeleteItem"
              Resource:
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-cause"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.stage}-cause/*"


resources:
  Resources:
    OrganizationTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        TableName: ${self:provider.environment.ORGANIZATION_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    CauseTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
          -
            AttributeName: "organizationId"
            AttributeType: "S"     
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
          -
            AttributeName: "organizationId"
            KeyType: "RANGE"  
        TableName: ${self:provider.environment.CAUSE_TABLE}
        # Set the capacity based on the stage
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
    




